// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Logistic.Shared.Entites;
using Microsoft.EntityFrameworkCore;

namespace Logistic.BackEnd.Data.Data;

public partial class dbLogisticaContext : DbContext
{
    public dbLogisticaContext(DbContextOptions<dbLogisticaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Direccion> Direccions { get; set; }

    public virtual DbSet<Empresa> Empresas { get; set; }

    public virtual DbSet<EmpresaGrupo> EmpresaGrupos { get; set; }

    public virtual DbSet<EmpresaLocal> EmpresaLocals { get; set; }

    public virtual DbSet<Imagene> Imagenes { get; set; }

    public virtual DbSet<Paise> Paises { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<TipoAlmacen> TipoAlmacens { get; set; }

    public virtual DbSet<TipoArticulo> TipoArticulos { get; set; }

    public virtual DbSet<TipoCalificacion> TipoCalificacions { get; set; }

    public virtual DbSet<TipoCambio> TipoCambios { get; set; }

    public virtual DbSet<TipoCompra> TipoCompras { get; set; }

    public virtual DbSet<TipoCuentaBancarium> TipoCuentaBancaria { get; set; }

    public virtual DbSet<TipoCuentaMayor> TipoCuentaMayors { get; set; }

    public virtual DbSet<TipoDireccion> TipoDireccions { get; set; }

    public virtual DbSet<TipoDocumento> TipoDocumentos { get; set; }

    public virtual DbSet<TipoDocumentoIdentidad> TipoDocumentoIdentidads { get; set; }

    public virtual DbSet<TipoFormaPago> TipoFormaPagos { get; set; }

    public virtual DbSet<TipoMarcaArticulo> TipoMarcaArticulos { get; set; }

    public virtual DbSet<TipoMotivoBaja> TipoMotivoBajas { get; set; }

    public virtual DbSet<TipoMovimiento> TipoMovimientos { get; set; }

    public virtual DbSet<TipoProceso> TipoProcesos { get; set; }

    public virtual DbSet<TipoSocio> TipoSocios { get; set; }

    public virtual DbSet<TipoSolicitud> TipoSolicituds { get; set; }

    public virtual DbSet<TipoValorizacion> TipoValorizacions { get; set; }

    public virtual DbSet<TipoVium> TipoVia { get; set; }

    public virtual DbSet<TipoZona> TipoZonas { get; set; }

    public virtual DbSet<UbigeoDepartamento> UbigeoDepartamentos { get; set; }

    public virtual DbSet<UbigeoDistrito> UbigeoDistritos { get; set; }

    public virtual DbSet<UbigeoProvincium> UbigeoProvincia { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<UsuarioLocale> UsuarioLocales { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Direccion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Direccio__3214EC076A5F7908");

            entity.ToTable("Direccion");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.DireccionName)
                .HasMaxLength(96)
                .IsUnicode(false)
                .HasComment("Dirección");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdDistrito).HasComment("Distrito ID");
            entity.Property(e => e.IdPais).HasComment("País ID");
            entity.Property(e => e.IdTipoDireccion).HasComment("Tipo Dirección ID");
            entity.Property(e => e.IdTipoVia).HasComment("Tipo Via ID");
            entity.Property(e => e.IdTipoZona).HasComment("Tipo Zona ID");
            entity.Property(e => e.UbigeoName)
                .HasMaxLength(96)
                .IsUnicode(false)
                .HasComment("Ubigeo");
            entity.Property(e => e.ViaNombre)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Nombre Vía");
            entity.Property(e => e.ViaNumero)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Número Vía");
            entity.Property(e => e.ZonaNombre)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Nombre Zona");

            entity.HasOne(d => d.IdDistritoNavigation).WithMany(p => p.Direccions)
                .HasForeignKey(d => d.IdDistrito)
                .HasConstraintName("FK_Direccion_UbigeoDistrito");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Direccions)
                .HasForeignKey(d => d.IdPais)
                .HasConstraintName("FK_Direccion_Paises");

            entity.HasOne(d => d.IdTipoDireccionNavigation).WithMany(p => p.Direccions)
                .HasForeignKey(d => d.IdTipoDireccion)
                .HasConstraintName("FK_Direccion_TipoDireccion");

            entity.HasOne(d => d.IdTipoViaNavigation).WithMany(p => p.Direccions)
                .HasForeignKey(d => d.IdTipoVia)
                .HasConstraintName("FK_Direccion_TipoVia");

            entity.HasOne(d => d.IdTipoZonaNavigation).WithMany(p => p.Direccions)
                .HasForeignKey(d => d.IdTipoZona)
                .HasConstraintName("FK_Direccion_TipoZona");
        });

        modelBuilder.Entity<Empresa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Empresa__3214EC071A3D0881");

            entity.ToTable("Empresa");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdDireccion).HasComment("Dirección ID");
            entity.Property(e => e.IdGrupo).HasComment("Grupo ID");
            entity.Property(e => e.IdLogoImagen).HasComment("Logo ID");
            entity.Property(e => e.NumeroRuc)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("RUC")
                .HasColumnName("NumeroRUC");
            entity.Property(e => e.PaginaWeb)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasComment("Página Web");
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasComment("Razón Social");

            entity.HasOne(d => d.IdDireccionNavigation).WithMany(p => p.Empresas)
                .HasForeignKey(d => d.IdDireccion)
                .HasConstraintName("FK_Empresa_Direccion");

            entity.HasOne(d => d.IdGrupoNavigation).WithMany(p => p.Empresas)
                .HasForeignKey(d => d.IdGrupo)
                .HasConstraintName("FK_Empresa_EmpresaGrupos");

            entity.HasOne(d => d.IdLogoImagenNavigation).WithMany(p => p.Empresas)
                .HasForeignKey(d => d.IdLogoImagen)
                .HasConstraintName("FK_Empresa_Imagenes");
        });

        modelBuilder.Entity<EmpresaGrupo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EmpresaG__3214EC0766C30F1C");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdDireccion).HasComment("Dirección ID");
            entity.Property(e => e.IdLogoImagen).HasComment("Logo ID");
            entity.Property(e => e.NumeroRuc)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("RUC")
                .HasColumnName("NumeroRUC");
            entity.Property(e => e.PaginaWeb)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasComment("Página Web");
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasComment("Razón Social");

            entity.HasOne(d => d.IdDireccionNavigation).WithMany(p => p.EmpresaGrupos)
                .HasForeignKey(d => d.IdDireccion)
                .HasConstraintName("FK_EmpresaGrupos_Direccion");

            entity.HasOne(d => d.IdLogoImagenNavigation).WithMany(p => p.EmpresaGrupos)
                .HasForeignKey(d => d.IdLogoImagen)
                .HasConstraintName("FK_EmpresaGrupos_Imagenes");
        });

        modelBuilder.Entity<EmpresaLocal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__EmpresaL__3214EC077E1ADA85");

            entity.ToTable("EmpresaLocal");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdDireccion).HasComment("Dirección ID");
            entity.Property(e => e.IdEmpresa).HasComment("Empresa ID");
            entity.Property(e => e.NumeroRuc)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("RUC")
                .HasColumnName("NumeroRUC");
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasComment("Razón Social");

            entity.HasOne(d => d.IdDireccionNavigation).WithMany(p => p.EmpresaLocals)
                .HasForeignKey(d => d.IdDireccion)
                .HasConstraintName("FK_EmpresaLocal_Direccion");

            entity.HasOne(d => d.IdEmpresaNavigation).WithMany(p => p.EmpresaLocals)
                .HasForeignKey(d => d.IdEmpresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaLocal_Empresa");
        });

        modelBuilder.Entity<Imagene>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Imagenes__3214EC0718872A14");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.ImagenArchivo).HasComment("Archivo");
            entity.Property(e => e.ImagenExtension)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Extensión");
            entity.Property(e => e.ImagenNombre)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasComment("Nombre");
        });

        modelBuilder.Entity<Paise>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Paises__3214EC0768B18D6D");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roles__3214EC07AB7E9447");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoAlmacen>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoAlma__3214EC0736E29B8A");

            entity.ToTable("TipoAlmacen");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoArticulo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoArti__3214EC074397039B");

            entity.ToTable("TipoArticulo");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Aud.Fch.Insert")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Aud.Fch.InsertUser");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoCalificacion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoCali__3214EC07F417F360");

            entity.ToTable("TipoCalificacion");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoCambio>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoCamb__3214EC0771C57EF1");

            entity.ToTable("TipoCambio");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.FechaOperacion).HasColumnType("date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
            entity.Property(e => e.TipoOperacion)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ValorTipoCambio).HasColumnType("decimal(12, 6)");
        });

        modelBuilder.Entity<TipoCompra>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoComp__3214EC07A19E3465");

            entity.ToTable("TipoCompra");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoCuentaBancarium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoCuen__3214EC071CDA998C");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoCuentaMayor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoCuen__3214EC07465EFDDB");

            entity.ToTable("TipoCuentaMayor");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoDireccion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoDire__3214EC0753EA705A");

            entity.ToTable("TipoDireccion");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoDocumento>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoDocu__3214EC0795E6B3A4");

            entity.ToTable("TipoDocumento");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoDocumentoIdentidad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoDocu__3214EC07699345D3");

            entity.ToTable("TipoDocumentoIdentidad");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdCodigoSunat)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
            entity.Property(e => e.Simbolo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoFormaPago>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoForm__3214EC078C1B120F");

            entity.ToTable("TipoFormaPago");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoMarcaArticulo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoMarc__3214EC07696CF1BB");

            entity.ToTable("TipoMarcaArticulo");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoMotivoBaja>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoMoti__3214EC0764A09313");

            entity.ToTable("TipoMotivoBaja");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoMovimiento>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoMovi__3214EC07E438A6A3");

            entity.ToTable("TipoMovimiento");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.CodigoDetraccion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IngresoSalida)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
            entity.Property(e => e.TipoOperaccionSunat)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoProceso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoProc__3214EC07C8946539");

            entity.ToTable("TipoProceso");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoSocio>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoSoci__3214EC075FF7F6B4");

            entity.ToTable("TipoSocio");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoSolicitud>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoSoli__3214EC07AB9552EB");

            entity.ToTable("TipoSolicitud");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoValorizacion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoValo__3214EC073D8F9652");

            entity.ToTable("TipoValorizacion");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoVium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoVia__3214EC070C41CC0B");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<TipoZona>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TipoZona__3214EC079583E7C4");

            entity.ToTable("TipoZona");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<UbigeoDepartamento>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UbigeoDe__3214EC078BEF15CB");

            entity.ToTable("UbigeoDepartamento");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");
        });

        modelBuilder.Entity<UbigeoDistrito>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UbigeoDi__3214EC071A1AD2C0");

            entity.ToTable("UbigeoDistrito");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdProvincia).HasComment("Provincia ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.UbigeoDistritos)
                .HasForeignKey(d => d.IdProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UbigeoDistrito_UbigeoProvincia");
        });

        modelBuilder.Entity<UbigeoProvincium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UbigeoPr__3214EC0750B7E584");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Codigo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdDepartamento).HasComment("Departamento ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");

            entity.HasOne(d => d.IdDepartamentoNavigation).WithMany(p => p.UbigeoProvincia)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UbigeoProvincia_UbigeoDepartamento");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Usuarios__3214EC073EC1A31C");

            entity.Property(e => e.Id).HasComment("ID");
            entity.Property(e => e.AuditInsertFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.Celular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Celular");
            entity.Property(e => e.Clave)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasComment("Clave");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Código");
            entity.Property(e => e.Correo)
                .HasMaxLength(96)
                .IsUnicode(false)
                .HasComment("Email");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdFoto).HasComment("Foto ID");
            entity.Property(e => e.IdRol).HasComment("Rol ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción");

            entity.HasOne(d => d.IdFotoNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdFoto)
                .HasConstraintName("FK_Usuarios_Imagenes");

            entity.HasOne(d => d.IdRolNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdRol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Roles");
        });

        modelBuilder.Entity<UsuarioLocale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UsuarioL__3214EC071D970F78");

            entity.Property(e => e.Id).HasComment("Id");
            entity.Property(e => e.AuditInsertFecha)
                .HasComment("Auditoría Insert Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditInsertUsuario)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Insert User");
            entity.Property(e => e.AuditUpdateFecha)
                .HasComment("Auditoría Update Fecha")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUpdateUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Auditoría Update Fecha");
            entity.Property(e => e.EsActivo).HasComment("¿Es Activo?");
            entity.Property(e => e.IdLocal).HasComment("Local ID");
            entity.Property(e => e.IdUsuario).HasComment("Usuario ID");

            entity.HasOne(d => d.IdLocalNavigation).WithMany(p => p.UsuarioLocales)
                .HasForeignKey(d => d.IdLocal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsuarioLocales_EmpresaLocal");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.UsuarioLocales)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsuarioLocales_Usuarios");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}